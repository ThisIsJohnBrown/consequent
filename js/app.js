// Generated by CoffeeScript 1.7.1
var SoundApp, soundApp;

SoundApp = function(sketch) {
  this.mute = false;
  this.data = null;
  this.gibber = sketch.Gibber;
  sketch.connect = (function(_this) {
    return function() {
      var socket_;
      socket_ = new WebSocket("ws://literature.uncontext.com:80");
      return socket_.onmessage = function(response) {
        var data, match;
        match = true;
        data = jQuery.parseJSON(response.data);
        if (data !== _this.data) {
          sketch.onDataChange(data);
        }
      };
    };
  })(this);
  sketch.setup = (function(_this) {
    return function() {
      sketch.createCanvas(sketch.windowWidth, sketch.windowHeight);
      console.log(_this.gibber);
      _this.kick = sketch.createEDrum("x...x...");
      _this.snare = sketch.createEDrum("..o...o.");
      _this.hat = sketch.createEDrum("xxxxxxx-");
      _this.sine = sketch.createSine();
      _this.fm = sketch.createFM();
      _this.schizo = sketch.createSchizo();
      _this.delay = sketch.createDelay();
    };
  })(this);
  sketch.createCrush = (function(_this) {
    return function() {
      var crush;
      crush = _this.gibber.FX.Crush({
        bitDepth: 4
      });
      crush.bitDepth.seq([2, 4, 8, 6], 1 / 2);
      return crush;
    };
  })(this);
  sketch.createEDrum = (function(_this) {
    return function(pattern) {
      var drum;
      drum = _this.gibber.Percussion.EDrums(pattern);
      return drum;
    };
  })(this);
  sketch.createSine = (function(_this) {
    return function() {
      var sine, tremolo;
      sine = _this.gibber.Oscillators.Sine();
      sine.frequency.seq([440, 220], [1 / 4, 1 / 8, 1 / 16]);
      tremolo = _this.gibber.FX.Tremolo({
        amp: 1,
        frequency: .1
      });
      sine.fx.add(tremolo);
      return sine;
    };
  })(this);
  sketch.createPWM = (function(_this) {
    return function() {
      var pwm;
      pwm = _this.gibber.Oscillators.PWM({
        pulsewidth: _this.gibber.Binops.Add(.5, _this.gibber.Oscillators.Sine(0.1, 100)._)
      });
      return pwm;
    };
  })(this);
  sketch.createSynth = (function(_this) {
    return function() {
      var synth;
      synth = _this.gibber.Synths.Synth().note.seq([0, 1, 2, 3], 1 / 4);
      synth = _this.gibber.Synths.Synth({
        attack: .5,
        decay: .85
      });
      synth.play(["c3", "c3", "eb3", "d4"].random(), [1 / 2, 1 / 4, 1 / 4].random(1 / 4, 1 / 2));
      synth.amp = .1;
      return synth;
    };
  })(this);
  sketch.createFM = (function(_this) {
    return function() {
      var fm;
      fm = _this.gibber.Synths.FM({
        attack: 0.01,
        cmRatio: .5
      });
      fm.fx.add(_this.gibber.FX.Delay({
        time: sketch.mouseX,
        feedback: sketch.mouseY
      }));
      fm.play(["c3", "c3", "d3", "eb3", "c3", "eb3", "eb3", "d3"].random(), [1 / 8, 1 / 8, 1 / 16]);
      return fm;
    };
  })(this);
  sketch.createMono = (function(_this) {
    return function() {
      var mono;
      mono = _this.gibber.Synths.Mono().note.seq(0, 1, 1 / 4).detune2.seq(_this.gibber.Utilities.Rndf(0, .035)).detune3.seq(_this.gibber.Utilities.Rndf(0, .65));
      mono.octave2 = 0;
      mono.octave3 = 0;
      return mono;
    };
  })(this);
  sketch.createSchizo = (function(_this) {
    return function() {
      var schizo;
      schizo = _this.gibber.FX.Schizo({
        chance: .2
      });
      return schizo;
    };
  })(this);
  sketch.createDelay = (function(_this) {
    return function() {
      var delay;
      delay = _this.gibber.FX.Delay({
        feedback: .3
      });
      return delay;
    };
  })(this);
  sketch.onDataChange = (function(_this) {
    return function(data) {
      var f, time;
      _this.data = data;
      f = (_this.data.a + _this.data.b) * _this.data.d;
      time = (_this.data.e.f + .3) / _this.data.e.g;
      TweenLite.to(_this.fm, time, {
        frequency: f
      });
      _this.fm.frequency = (_this.data.a + _this.data.b) * _this.data.d * 5;
      return _this.schizo.chance = _this.data.a / _this.data.b;
    };
  })(this);
  sketch.draw = (function(_this) {
    return function() {};
  })(this);
  sketch.keyPressed = (function(_this) {
    return function(e) {
      switch (e.keyCode) {
        case 32:
          _this.mute = !_this.mute;
          if (_this.mute) {
            _this.gibber.Master.amp = 0;
            return sketch.noLoop();
          } else {
            _this.gibber.Master.amp = 1;
            return sketch.loop();
          }
          break;
        case 16:
          return console.log(_this.data);
      }
    };
  })(this);
};

soundApp = new p5(SoundApp);

soundApp.connect();
